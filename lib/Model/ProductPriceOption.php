<?php
/**
 * ProductPriceOption
 *
 * PHP version 5
 *
 * @category Class
 * @package  AliseeksApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Aliseeks API
 *
 * AliExpress product searching and product details retrieval API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AliseeksApi\Model;

use \ArrayAccess;
use \AliseeksApi\ObjectSerializer;

/**
 * ProductPriceOption Class Doc Comment
 *
 * @category Class
 * @description A product price option
 * @package  AliseeksApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProductPriceOption implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProductPriceOption';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'max_amount' => '\AliseeksApi\Model\Amount',
        'max_amount_per_piece' => '\AliseeksApi\Model\Amount',
        'min_amount' => '\AliseeksApi\Model\Amount',
        'min_amount_per_piece' => '\AliseeksApi\Model\Amount',
        'minimum_purchase' => 'int',
        'processing_time' => 'double',
        'bulk_option' => '\AliseeksApi\Model\ProductBulkOption'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'max_amount' => null,
        'max_amount_per_piece' => null,
        'min_amount' => null,
        'min_amount_per_piece' => null,
        'minimum_purchase' => 'int32',
        'processing_time' => 'double',
        'bulk_option' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'max_amount' => 'maxAmount',
        'max_amount_per_piece' => 'maxAmountPerPiece',
        'min_amount' => 'minAmount',
        'min_amount_per_piece' => 'minAmountPerPiece',
        'minimum_purchase' => 'minimumPurchase',
        'processing_time' => 'processingTime',
        'bulk_option' => 'bulkOption'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'max_amount' => 'setMaxAmount',
        'max_amount_per_piece' => 'setMaxAmountPerPiece',
        'min_amount' => 'setMinAmount',
        'min_amount_per_piece' => 'setMinAmountPerPiece',
        'minimum_purchase' => 'setMinimumPurchase',
        'processing_time' => 'setProcessingTime',
        'bulk_option' => 'setBulkOption'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'max_amount' => 'getMaxAmount',
        'max_amount_per_piece' => 'getMaxAmountPerPiece',
        'min_amount' => 'getMinAmount',
        'min_amount_per_piece' => 'getMinAmountPerPiece',
        'minimum_purchase' => 'getMinimumPurchase',
        'processing_time' => 'getProcessingTime',
        'bulk_option' => 'getBulkOption'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['max_amount'] = isset($data['max_amount']) ? $data['max_amount'] : null;
        $this->container['max_amount_per_piece'] = isset($data['max_amount_per_piece']) ? $data['max_amount_per_piece'] : null;
        $this->container['min_amount'] = isset($data['min_amount']) ? $data['min_amount'] : null;
        $this->container['min_amount_per_piece'] = isset($data['min_amount_per_piece']) ? $data['min_amount_per_piece'] : null;
        $this->container['minimum_purchase'] = isset($data['minimum_purchase']) ? $data['minimum_purchase'] : null;
        $this->container['processing_time'] = isset($data['processing_time']) ? $data['processing_time'] : null;
        $this->container['bulk_option'] = isset($data['bulk_option']) ? $data['bulk_option'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets max_amount
     *
     * @return \AliseeksApi\Model\Amount|null
     */
    public function getMaxAmount()
    {
        return $this->container['max_amount'];
    }

    /**
     * Sets max_amount
     *
     * @param \AliseeksApi\Model\Amount|null $max_amount max_amount
     *
     * @return $this
     */
    public function setMaxAmount($max_amount)
    {
        $this->container['max_amount'] = $max_amount;

        return $this;
    }

    /**
     * Gets max_amount_per_piece
     *
     * @return \AliseeksApi\Model\Amount|null
     */
    public function getMaxAmountPerPiece()
    {
        return $this->container['max_amount_per_piece'];
    }

    /**
     * Sets max_amount_per_piece
     *
     * @param \AliseeksApi\Model\Amount|null $max_amount_per_piece max_amount_per_piece
     *
     * @return $this
     */
    public function setMaxAmountPerPiece($max_amount_per_piece)
    {
        $this->container['max_amount_per_piece'] = $max_amount_per_piece;

        return $this;
    }

    /**
     * Gets min_amount
     *
     * @return \AliseeksApi\Model\Amount|null
     */
    public function getMinAmount()
    {
        return $this->container['min_amount'];
    }

    /**
     * Sets min_amount
     *
     * @param \AliseeksApi\Model\Amount|null $min_amount min_amount
     *
     * @return $this
     */
    public function setMinAmount($min_amount)
    {
        $this->container['min_amount'] = $min_amount;

        return $this;
    }

    /**
     * Gets min_amount_per_piece
     *
     * @return \AliseeksApi\Model\Amount|null
     */
    public function getMinAmountPerPiece()
    {
        return $this->container['min_amount_per_piece'];
    }

    /**
     * Sets min_amount_per_piece
     *
     * @param \AliseeksApi\Model\Amount|null $min_amount_per_piece min_amount_per_piece
     *
     * @return $this
     */
    public function setMinAmountPerPiece($min_amount_per_piece)
    {
        $this->container['min_amount_per_piece'] = $min_amount_per_piece;

        return $this;
    }

    /**
     * Gets minimum_purchase
     *
     * @return int|null
     */
    public function getMinimumPurchase()
    {
        return $this->container['minimum_purchase'];
    }

    /**
     * Sets minimum_purchase
     *
     * @param int|null $minimum_purchase The minimum purchase amount for this price option
     *
     * @return $this
     */
    public function setMinimumPurchase($minimum_purchase)
    {
        $this->container['minimum_purchase'] = $minimum_purchase;

        return $this;
    }

    /**
     * Gets processing_time
     *
     * @return double|null
     */
    public function getProcessingTime()
    {
        return $this->container['processing_time'];
    }

    /**
     * Sets processing_time
     *
     * @param double|null $processing_time The amount of time to process an order in this option
     *
     * @return $this
     */
    public function setProcessingTime($processing_time)
    {
        $this->container['processing_time'] = $processing_time;

        return $this;
    }

    /**
     * Gets bulk_option
     *
     * @return \AliseeksApi\Model\ProductBulkOption|null
     */
    public function getBulkOption()
    {
        return $this->container['bulk_option'];
    }

    /**
     * Sets bulk_option
     *
     * @param \AliseeksApi\Model\ProductBulkOption|null $bulk_option bulk_option
     *
     * @return $this
     */
    public function setBulkOption($bulk_option)
    {
        $this->container['bulk_option'] = $bulk_option;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


