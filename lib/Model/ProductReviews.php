<?php
/**
 * ProductReviews
 *
 * PHP version 5
 *
 * @category Class
 * @package  AliseeksApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Aliseeks API
 *
 * AliExpress product searching and product details retrieval API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AliseeksApi\Model;

use \ArrayAccess;
use \AliseeksApi\ObjectSerializer;

/**
 * ProductReviews Class Doc Comment
 *
 * @category Class
 * @description Reviews on a product
 * @package  AliseeksApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProductReviews implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProductReviews';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'five_star_count' => 'int',
        'four_star_count' => 'int',
        'three_star_count' => 'int',
        'two_star_count' => 'int',
        'one_star_count' => 'int',
        'total_count' => 'int',
        'positive_count' => 'int',
        'negative_count' => 'int',
        'neutral_count' => 'int',
        'ratings' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'five_star_count' => 'int32',
        'four_star_count' => 'int32',
        'three_star_count' => 'int32',
        'two_star_count' => 'int32',
        'one_star_count' => 'int32',
        'total_count' => 'int32',
        'positive_count' => 'int32',
        'negative_count' => 'int32',
        'neutral_count' => 'int32',
        'ratings' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'five_star_count' => 'fiveStarCount',
        'four_star_count' => 'fourStarCount',
        'three_star_count' => 'threeStarCount',
        'two_star_count' => 'twoStarCount',
        'one_star_count' => 'oneStarCount',
        'total_count' => 'totalCount',
        'positive_count' => 'positiveCount',
        'negative_count' => 'negativeCount',
        'neutral_count' => 'neutralCount',
        'ratings' => 'ratings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'five_star_count' => 'setFiveStarCount',
        'four_star_count' => 'setFourStarCount',
        'three_star_count' => 'setThreeStarCount',
        'two_star_count' => 'setTwoStarCount',
        'one_star_count' => 'setOneStarCount',
        'total_count' => 'setTotalCount',
        'positive_count' => 'setPositiveCount',
        'negative_count' => 'setNegativeCount',
        'neutral_count' => 'setNeutralCount',
        'ratings' => 'setRatings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'five_star_count' => 'getFiveStarCount',
        'four_star_count' => 'getFourStarCount',
        'three_star_count' => 'getThreeStarCount',
        'two_star_count' => 'getTwoStarCount',
        'one_star_count' => 'getOneStarCount',
        'total_count' => 'getTotalCount',
        'positive_count' => 'getPositiveCount',
        'negative_count' => 'getNegativeCount',
        'neutral_count' => 'getNeutralCount',
        'ratings' => 'getRatings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['five_star_count'] = isset($data['five_star_count']) ? $data['five_star_count'] : null;
        $this->container['four_star_count'] = isset($data['four_star_count']) ? $data['four_star_count'] : null;
        $this->container['three_star_count'] = isset($data['three_star_count']) ? $data['three_star_count'] : null;
        $this->container['two_star_count'] = isset($data['two_star_count']) ? $data['two_star_count'] : null;
        $this->container['one_star_count'] = isset($data['one_star_count']) ? $data['one_star_count'] : null;
        $this->container['total_count'] = isset($data['total_count']) ? $data['total_count'] : null;
        $this->container['positive_count'] = isset($data['positive_count']) ? $data['positive_count'] : null;
        $this->container['negative_count'] = isset($data['negative_count']) ? $data['negative_count'] : null;
        $this->container['neutral_count'] = isset($data['neutral_count']) ? $data['neutral_count'] : null;
        $this->container['ratings'] = isset($data['ratings']) ? $data['ratings'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets five_star_count
     *
     * @return int|null
     */
    public function getFiveStarCount()
    {
        return $this->container['five_star_count'];
    }

    /**
     * Sets five_star_count
     *
     * @param int|null $five_star_count five_star_count
     *
     * @return $this
     */
    public function setFiveStarCount($five_star_count)
    {
        $this->container['five_star_count'] = $five_star_count;

        return $this;
    }

    /**
     * Gets four_star_count
     *
     * @return int|null
     */
    public function getFourStarCount()
    {
        return $this->container['four_star_count'];
    }

    /**
     * Sets four_star_count
     *
     * @param int|null $four_star_count four_star_count
     *
     * @return $this
     */
    public function setFourStarCount($four_star_count)
    {
        $this->container['four_star_count'] = $four_star_count;

        return $this;
    }

    /**
     * Gets three_star_count
     *
     * @return int|null
     */
    public function getThreeStarCount()
    {
        return $this->container['three_star_count'];
    }

    /**
     * Sets three_star_count
     *
     * @param int|null $three_star_count three_star_count
     *
     * @return $this
     */
    public function setThreeStarCount($three_star_count)
    {
        $this->container['three_star_count'] = $three_star_count;

        return $this;
    }

    /**
     * Gets two_star_count
     *
     * @return int|null
     */
    public function getTwoStarCount()
    {
        return $this->container['two_star_count'];
    }

    /**
     * Sets two_star_count
     *
     * @param int|null $two_star_count two_star_count
     *
     * @return $this
     */
    public function setTwoStarCount($two_star_count)
    {
        $this->container['two_star_count'] = $two_star_count;

        return $this;
    }

    /**
     * Gets one_star_count
     *
     * @return int|null
     */
    public function getOneStarCount()
    {
        return $this->container['one_star_count'];
    }

    /**
     * Sets one_star_count
     *
     * @param int|null $one_star_count one_star_count
     *
     * @return $this
     */
    public function setOneStarCount($one_star_count)
    {
        $this->container['one_star_count'] = $one_star_count;

        return $this;
    }

    /**
     * Gets total_count
     *
     * @return int|null
     */
    public function getTotalCount()
    {
        return $this->container['total_count'];
    }

    /**
     * Sets total_count
     *
     * @param int|null $total_count Total review count
     *
     * @return $this
     */
    public function setTotalCount($total_count)
    {
        $this->container['total_count'] = $total_count;

        return $this;
    }

    /**
     * Gets positive_count
     *
     * @return int|null
     */
    public function getPositiveCount()
    {
        return $this->container['positive_count'];
    }

    /**
     * Sets positive_count
     *
     * @param int|null $positive_count Count of positive reviews
     *
     * @return $this
     */
    public function setPositiveCount($positive_count)
    {
        $this->container['positive_count'] = $positive_count;

        return $this;
    }

    /**
     * Gets negative_count
     *
     * @return int|null
     */
    public function getNegativeCount()
    {
        return $this->container['negative_count'];
    }

    /**
     * Sets negative_count
     *
     * @param int|null $negative_count Count of negative reviews
     *
     * @return $this
     */
    public function setNegativeCount($negative_count)
    {
        $this->container['negative_count'] = $negative_count;

        return $this;
    }

    /**
     * Gets neutral_count
     *
     * @return int|null
     */
    public function getNeutralCount()
    {
        return $this->container['neutral_count'];
    }

    /**
     * Sets neutral_count
     *
     * @param int|null $neutral_count Count of neutral reviews
     *
     * @return $this
     */
    public function setNeutralCount($neutral_count)
    {
        $this->container['neutral_count'] = $neutral_count;

        return $this;
    }

    /**
     * Gets ratings
     *
     * @return double|null
     */
    public function getRatings()
    {
        return $this->container['ratings'];
    }

    /**
     * Sets ratings
     *
     * @param double|null $ratings Product ratings score
     *
     * @return $this
     */
    public function setRatings($ratings)
    {
        $this->container['ratings'] = $ratings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


