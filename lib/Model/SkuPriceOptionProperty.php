<?php
/**
 * SkuPriceOptionProperty
 *
 * PHP version 5
 *
 * @category Class
 * @package  AliseeksApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Aliseeks API
 *
 * AliExpress product searching and product details retrieval API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AliseeksApi\Model;

use \ArrayAccess;
use \AliseeksApi\ObjectSerializer;

/**
 * SkuPriceOptionProperty Class Doc Comment
 *
 * @category Class
 * @description A property of a sku of a product
 * @package  AliseeksApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SkuPriceOptionProperty implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SkuPriceOptionProperty';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'property_id' => 'int',
        'property_name' => 'string',
        'value_id' => 'int',
        'value_name' => 'string',
        'value_display_name' => 'string',
        'ship_from_country' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'property_id' => 'int32',
        'property_name' => null,
        'value_id' => 'int32',
        'value_name' => null,
        'value_display_name' => null,
        'ship_from_country' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'property_id' => 'propertyId',
        'property_name' => 'propertyName',
        'value_id' => 'valueId',
        'value_name' => 'valueName',
        'value_display_name' => 'valueDisplayName',
        'ship_from_country' => 'shipFromCountry'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'property_id' => 'setPropertyId',
        'property_name' => 'setPropertyName',
        'value_id' => 'setValueId',
        'value_name' => 'setValueName',
        'value_display_name' => 'setValueDisplayName',
        'ship_from_country' => 'setShipFromCountry'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'property_id' => 'getPropertyId',
        'property_name' => 'getPropertyName',
        'value_id' => 'getValueId',
        'value_name' => 'getValueName',
        'value_display_name' => 'getValueDisplayName',
        'ship_from_country' => 'getShipFromCountry'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['property_id'] = isset($data['property_id']) ? $data['property_id'] : null;
        $this->container['property_name'] = isset($data['property_name']) ? $data['property_name'] : null;
        $this->container['value_id'] = isset($data['value_id']) ? $data['value_id'] : null;
        $this->container['value_name'] = isset($data['value_name']) ? $data['value_name'] : null;
        $this->container['value_display_name'] = isset($data['value_display_name']) ? $data['value_display_name'] : null;
        $this->container['ship_from_country'] = isset($data['ship_from_country']) ? $data['ship_from_country'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets property_id
     *
     * @return int|null
     */
    public function getPropertyId()
    {
        return $this->container['property_id'];
    }

    /**
     * Sets property_id
     *
     * @param int|null $property_id The ID of the property
     *
     * @return $this
     */
    public function setPropertyId($property_id)
    {
        $this->container['property_id'] = $property_id;

        return $this;
    }

    /**
     * Gets property_name
     *
     * @return string|null
     */
    public function getPropertyName()
    {
        return $this->container['property_name'];
    }

    /**
     * Sets property_name
     *
     * @param string|null $property_name The name of the property
     *
     * @return $this
     */
    public function setPropertyName($property_name)
    {
        $this->container['property_name'] = $property_name;

        return $this;
    }

    /**
     * Gets value_id
     *
     * @return int|null
     */
    public function getValueId()
    {
        return $this->container['value_id'];
    }

    /**
     * Sets value_id
     *
     * @param int|null $value_id The ID of the property value
     *
     * @return $this
     */
    public function setValueId($value_id)
    {
        $this->container['value_id'] = $value_id;

        return $this;
    }

    /**
     * Gets value_name
     *
     * @return string|null
     */
    public function getValueName()
    {
        return $this->container['value_name'];
    }

    /**
     * Sets value_name
     *
     * @param string|null $value_name The name of the property value
     *
     * @return $this
     */
    public function setValueName($value_name)
    {
        $this->container['value_name'] = $value_name;

        return $this;
    }

    /**
     * Gets value_display_name
     *
     * @return string|null
     */
    public function getValueDisplayName()
    {
        return $this->container['value_display_name'];
    }

    /**
     * Sets value_display_name
     *
     * @param string|null $value_display_name The display name of the property value
     *
     * @return $this
     */
    public function setValueDisplayName($value_display_name)
    {
        $this->container['value_display_name'] = $value_display_name;

        return $this;
    }

    /**
     * Gets ship_from_country
     *
     * @return string|null
     */
    public function getShipFromCountry()
    {
        return $this->container['ship_from_country'];
    }

    /**
     * Sets ship_from_country
     *
     * @param string|null $ship_from_country The country that the sku is shipped from
     *
     * @return $this
     */
    public function setShipFromCountry($ship_from_country)
    {
        $this->container['ship_from_country'] = $ship_from_country;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


