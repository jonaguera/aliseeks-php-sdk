<?php
/**
 * RealtimeSearchRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  AliseeksApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Aliseeks API
 *
 * AliExpress product searching and product details retrieval API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AliseeksApi\Model;

use \ArrayAccess;
use \AliseeksApi\ObjectSerializer;

/**
 * RealtimeSearchRequest Class Doc Comment
 *
 * @category Class
 * @description Realtime search request body
 * @package  AliseeksApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RealtimeSearchRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RealtimeSearchRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'category' => 'int',
        'text' => 'string',
        'price_range' => '\AliseeksApi\Model\DoubleRange',
        'ship_to_country' => 'string',
        'ship_from_country' => 'string',
        'sort' => 'string',
        'skip' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'category' => 'int32',
        'text' => null,
        'price_range' => null,
        'ship_to_country' => null,
        'ship_from_country' => null,
        'sort' => null,
        'skip' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'category' => 'category',
        'text' => 'text',
        'price_range' => 'priceRange',
        'ship_to_country' => 'shipToCountry',
        'ship_from_country' => 'shipFromCountry',
        'sort' => 'sort',
        'skip' => 'skip'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'category' => 'setCategory',
        'text' => 'setText',
        'price_range' => 'setPriceRange',
        'ship_to_country' => 'setShipToCountry',
        'ship_from_country' => 'setShipFromCountry',
        'sort' => 'setSort',
        'skip' => 'setSkip'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'category' => 'getCategory',
        'text' => 'getText',
        'price_range' => 'getPriceRange',
        'ship_to_country' => 'getShipToCountry',
        'ship_from_country' => 'getShipFromCountry',
        'sort' => 'getSort',
        'skip' => 'getSkip'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const SORT_BEST_MATCH = 'BEST_MATCH';
    const SORT_HIGHEST_PRICE = 'HIGHEST_PRICE';
    const SORT_LOWEST_PRICE = 'LOWEST_PRICE';
    const SORT_NUMBER_OF_ORDERS = 'NUMBER_OF_ORDERS';
    const SORT_SELLER_RATING = 'SELLER_RATING';
    const SORT_NEWEST_TO_OLDEST = 'NEWEST_TO_OLDEST';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSortAllowableValues()
    {
        return [
            self::SORT_BEST_MATCH,
            self::SORT_HIGHEST_PRICE,
            self::SORT_LOWEST_PRICE,
            self::SORT_NUMBER_OF_ORDERS,
            self::SORT_SELLER_RATING,
            self::SORT_NEWEST_TO_OLDEST,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['price_range'] = isset($data['price_range']) ? $data['price_range'] : null;
        $this->container['ship_to_country'] = isset($data['ship_to_country']) ? $data['ship_to_country'] : null;
        $this->container['ship_from_country'] = isset($data['ship_from_country']) ? $data['ship_from_country'] : null;
        $this->container['sort'] = isset($data['sort']) ? $data['sort'] : 'BEST_MATCH';
        $this->container['skip'] = isset($data['skip']) ? $data['skip'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSortAllowableValues();
        if (!is_null($this->container['sort']) && !in_array($this->container['sort'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'sort', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['skip']) && ($this->container['skip'] > 5000)) {
            $invalidProperties[] = "invalid value for 'skip', must be smaller than or equal to 5000.";
        }

        if (!is_null($this->container['skip']) && ($this->container['skip'] < 0)) {
            $invalidProperties[] = "invalid value for 'skip', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets category
     *
     * @return int|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param int|null $category The category to filter by
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string|null
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string|null $text The text to filter by
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets price_range
     *
     * @return \AliseeksApi\Model\DoubleRange|null
     */
    public function getPriceRange()
    {
        return $this->container['price_range'];
    }

    /**
     * Sets price_range
     *
     * @param \AliseeksApi\Model\DoubleRange|null $price_range price_range
     *
     * @return $this
     */
    public function setPriceRange($price_range)
    {
        $this->container['price_range'] = $price_range;

        return $this;
    }

    /**
     * Gets ship_to_country
     *
     * @return string|null
     */
    public function getShipToCountry()
    {
        return $this->container['ship_to_country'];
    }

    /**
     * Sets ship_to_country
     *
     * @param string|null $ship_to_country The 2 character ISO code of the country where the item will be shipped to
     *
     * @return $this
     */
    public function setShipToCountry($ship_to_country)
    {
        $this->container['ship_to_country'] = $ship_to_country;

        return $this;
    }

    /**
     * Gets ship_from_country
     *
     * @return string|null
     */
    public function getShipFromCountry()
    {
        return $this->container['ship_from_country'];
    }

    /**
     * Sets ship_from_country
     *
     * @param string|null $ship_from_country The 2 character ISO code of the country where the item is shipped from
     *
     * @return $this
     */
    public function setShipFromCountry($ship_from_country)
    {
        $this->container['ship_from_country'] = $ship_from_country;

        return $this;
    }

    /**
     * Gets sort
     *
     * @return string|null
     */
    public function getSort()
    {
        return $this->container['sort'];
    }

    /**
     * Sets sort
     *
     * @param string|null $sort The sort order of the result
     *
     * @return $this
     */
    public function setSort($sort)
    {
        $allowedValues = $this->getSortAllowableValues();
        if (!is_null($sort) && !in_array($sort, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sort', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sort'] = $sort;

        return $this;
    }

    /**
     * Gets skip
     *
     * @return int|null
     */
    public function getSkip()
    {
        return $this->container['skip'];
    }

    /**
     * Sets skip
     *
     * @param int|null $skip Number of items to skip, used for pagination
     *
     * @return $this
     */
    public function setSkip($skip)
    {

        if (!is_null($skip) && ($skip > 5000)) {
            throw new \InvalidArgumentException('invalid value for $skip when calling RealtimeSearchRequest., must be smaller than or equal to 5000.');
        }
        if (!is_null($skip) && ($skip < 0)) {
            throw new \InvalidArgumentException('invalid value for $skip when calling RealtimeSearchRequest., must be bigger than or equal to 0.');
        }

        $this->container['skip'] = $skip;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


